import numpy as np
from matplotlib import *
from pylab import *
import sys
import matplotlib.pyplot as plt
import time
from retry import retry

#because not every try could get converge result, so we will retry whole program 100 times
#till the final result converged
@retry(tries=30, delay=2)
def test():
    def perceptron(xs, ys):
        assert (len(xs.shape) == 2), "The first input to Perceptron must be a _matrix_ of row input vecdtors."
        assert (len(ys.shape) == 1), "The second input to Perceptron must be a _vector_ of n labels (try ys.flatten())."

        n, d = xs.shape  # so we have n input vectors, of d dimensions each

        ## fill in code ...
        w = [0] * d
        b = [0]

        for i in range(n):
            if ys[i] * (sum(w*xs[i]+b)) <= 0:
                w += ys[i]*xs[i]
                #print(w)
                b += ys[i]
                #print(b)
        #if ys[i] * (sum(w*xs[i]+b[i])) <= 0:
        # w += ys[i]*xs[i]
        # b[i] += ys[i]

        #b = np.sign(b)
        ## ... until here
        print("updated w is ", w)
        print("b is ", b)
        return (w, b)
    # number of input vectors
    N = 100

    # generate random (linarly separable) data
    xs = np.random.rand(N, 2)*10-5

    # defining random hyperplane
    w0 = np.random.rand(2)
    b0 = rand()*2-1;

    # assigning labels +1, -1 labels depending on what side of the plane they lie on
    ys = np.sign(xs.dot(w0)+b0)

    #print("xs is ", xs)
    #print("w0 is ", w0)
    #print("b0 is ", b0)
    #print("ys is ", ys)

    # call perceptron to find w from data
    w,b = perceptron(xs.copy(),ys.copy())
    #print(w.shape,b.shape)

    # test if all points are classified correctly
    print("Converge or not? ", all(np.sign(ys*(xs.dot(w)+b))==1.0))
    print("\n")
    assert (all(np.sign(ys*(xs.dot(w)+b))==1.0))  # yw'x should be +1.0 for every input
    print("Perceptron test passed!!")

    # we can make a pretty visualizxation
    from helperfunctions import visboundary
    visboundary(w,b,xs,ys)

test()
